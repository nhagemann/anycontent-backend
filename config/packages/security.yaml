security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
                memory:
                    users: # get new password hash via php -r "echo password_hash('****', PASSWORD_BCRYPT, ['cost' => 13]) . PHP_EOL;"
                        nils: { password: '$2y$13$DSTS4mBmIIBzzgi/tXB0mOrNy4vX/k6hcCl2oLijJaM24tEkzMose', roles: [ 'ROLE_ANYCONTENT' ] }
                        tim: { password: '$2y$13$DSTS4mBmIIBzzgi/tXB0mOrNy4vX/k6hcCl2oLijJaM24tEkzMose', roles: [ 'ROLE_ANYCONTENT' ] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        anycontent:
            pattern: ^/anycontent
            lazy: false
            provider: users_in_memory
            form_login:
                login_path: anycontent_login
                check_path: anycontent_login
            logout:
                path: anycontent_logout
                target: anycontent_start
            #http_basic:
            #    realm: Secured Area

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
